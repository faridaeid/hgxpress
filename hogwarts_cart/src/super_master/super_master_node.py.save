#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Image
from geometry_msgs.msg import Vector3
from std_msgs.msg import Float64, Int32MultiArray, Bool, Int32
from color_segmentation import ColorSegmentation
from pid_controller import PidController

from enum import Enum

class State(Enum):
    Waiting = 1
    Following = 2
    stop = 3
    Detaching = 4
    Dummy = 5

class SuperMasterNode(object):

    def __init__(self):

        rospy.init_node('super_master_node')
        self.cart_name = rospy.get_param('~cart_name')
        self.pub_motor = rospy.Publisher("motor/speed_motors", Int32MultiArray)
        self.detach_order = rospy.Subscriber(self.cart_name + '/detach', Bool, self.detach)

        self.color_segmentation = ColorSegmentation()
        self.pid_controller = PidController()
        self.motor_speed = Int32MultiArray()
        self.current_state = State.Waiting
        self.rushing_speed = 50
        self.rushing_area = 8000
        self.image_width = 320
        self.image_center = self.image_width / 2


    def detach(self, data):
        self.color_segmentation.set_color_range(Int32(4))
        self.current_state = State.Detaching

    def rotate(self, rotate_right):

        if rotate_right:
            # rotate right
            self.motor_speed.data = ([25 * 1,  25 * -1])
        else:
            # rotate left
            self.motor_speed.data = ([25 * -1,  25 * 1])

        self.pub_motor.publish(self.motor_speed)

    def park(self):

        # TODO check the signs of the offset
        # TODO take into consideration the position of the Detaching sign
	# for testing only
	detach(None)
        min_sign_area = 2000
        max_sign_area = 20000
        pid_setpoint_offset = 100
        rotate_right = False
        pid_setpoint = self.image_center + pid_setpoint_offset

        self.rotate(rotate_right)

        # not sure if busy waiting here will affect ros sleep in start_main_controller
        while self.color_segmentation.get_target_area() < min_sign_area:
            print "Parking target area: ", self.color_segmentation.get_target_area()
            pass

        self.pid_controller.idle()

        self.follow(setpoint=pid_setpoint, max_area=max_sign_area)

        self.current_state = State.Dummy

    def start_main_controller(self):

        rospy.sleep(5)
        rate = rospy.Rate(100)

        while not rospy.is_shutdown():
            if self.current_state == State.Waiting:
                # do some waiting logic here.
                self.current_state = State.Detaching
            elif self.current_state == State.Following:
                # print self.color_segmentation.get_target_area()
                self.follow()
            elif self.current_state == State.Detaching:
		print "detaching"
                self.park()
            elif self.current_state == State.Dummy:
                # dummy state just stay and do nothing
                self.pid_controller.idle()

            rate.sleep()

    def follow(self, max_area=50000, setpoint=None):
        # stupid python shit
        setpoint = setpoint if setpoint is not None else self.image_center

        center_x = self.color_segmentation.get_center_target()
        area = self.color_segmentation.get_target_area()
        self.pid_controller.update_setpoint(setpoint)
        if area < 200 or area > max_area: # upper area is not super accurate
            # no object or too close
            self.pid_controller.idle()
            # print "no object"
        elif area < self.rushing_area:
            # rushing the train to catch up speed
            print "rushing", self.rushing_speed, center_x, area
            self.pid_controller.set_speed(self.rushing_speed)
            self.pid_controller.start_pid(center_x)
        else:
            # train speed
            k = self.rushing_speed * self.rushing_area
            speed = k / area
            self.pid_controller.set_speed(speed)
            self.pid_controller.start_pid(center_x)
            print "following", speed, center_x, area
       
if __name__ == '__main__':
    mastar_node = SuperMasterNode()
    mastar_node.start_main_controller()
